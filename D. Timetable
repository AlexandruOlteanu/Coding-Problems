/*
    Programmer : Alexandru_Olteanu
    Link To Problem : https://codeforces.com/contest/946/problem/D
*/
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
ll const mod=1000000007LL;
ll const mod2=998244353LL;
ll mypowr(ll a,ll b) {ll res=1;if(b<0)b=0;a%=mod; assert(b>=0);
for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}
ll mypow(ll a,ll b) {ll res=1;if(b<0)b=0;assert(b>=0);
for(;b;b>>=1){if(b&1)res=res*a;a=a*a;}return res;}
ifstream in("input.txt");
ofstream out("output.txt");
#define mp make_pair
#define pb push_back
#define pf push_front
#define fi first
#define se second
#define all(x) x.begin(),x.end()
#define rall(x) x.rbegin(), x.rend()


//#define cin in
//#define cout out

const ll infll = 9e18;
const int inf = 2e9;
const ll maxn = 5e2 + 2;

int dp[maxn][maxn];
string s[maxn];
int f_dist[maxn][maxn];

int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);
    cout<<fixed<<setprecision(15);

    int test = 1;
    //cin>>test;
    memset(f_dist, -1, sizeof(f_dist));
    memset(dp, -1, sizeof(dp));
    while(test--){
        ll n, m, k;
        cin>>n>>m>>k;
        for(int i = 1; i <= n; ++i){
            cin>>s[i];
        }
        for(int i = 1; i <= n; ++i){
            int all = 0;
            for(int j = 0; j < m; ++j){
                all += (s[i][j] == '1');
            }
            for(int j = 0; j < m; ++j){
                int sum = 0;
                for(int t = j; t < m; ++t){
                    sum += (s[i][t] == '1');
                    int dist = t - j + 1;
                    if(f_dist[i][all - sum] < 0){
                        f_dist[i][all - sum] = dist;
                        continue;
                    }
                    f_dist[i][all - sum] = min(f_dist[i][all - sum], dist); 
                }
            }
            f_dist[i][all] = 0;
        }
        for(int i = 1; i <= n; ++i){
            for(int j = 0; j <= k; ++j){
                for(int t = 0; t <= j; ++t){
                    if(f_dist[i][t] < 0)continue;
                    if(dp[i][j] < 0)dp[i][j] = inf;
                    dp[i][j] = min(dp[i][j], dp[i - 1][j - t] + f_dist[i][t]);
                }
            }
        }

        cout<<dp[n][k] + 1<<'\n';
    
    }


    return 0;
}
