/*
    Programmer : Alexandru_Olteanu
    Link To Problem : https://codeforces.com/contest/691/problem/E
*/
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
ll const mod=1000000007LL;
ll const mod2=998244353LL;
ll mypowr(ll a,ll b) {ll res=1;if(b<0)b=0;a%=mod; assert(b>=0);
for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}
ll mypow(ll a,ll b) {ll res=1;if(b<0)b=0;assert(b>=0);
for(;b;b>>=1){if(b&1)res=res*a;a=a*a;}return res;}
ifstream in("easy_sum.in");
ofstream out("easy_sum.out");
#define mp make_pair
#define pb push_back
#define pf push_front
#define fi first
#define se second
#define all(x) x.begin(),x.end()
#define rall(x) x.rbegin(), x.rend()


//#define cin in
//#define cout out

const ll infll = 9e18;
const int inf = 2e9;
const ll maxn = 1e2 + 2;

vector<vector<ll>> cnt;
ll a[maxn];

vector<vector<ll>> mul (vector<vector<ll>> a, vector<vector<ll>> b){
    int n = a.size() - 1;
    vector<vector<ll>> c;
    c.resize(n + 1);
    for(int i = 1; i <= n; ++i){
        c[i].resize(n + 1);
        for(int j = 1; j <= n; ++j){
            c[i][j] = 0;
            for(int k = 1; k <= n; ++k){
                c[i][j] += a[i][k] * b[k][j] % mod;
                c[i][j] %= mod;
            }
        }
    }

    return c;
}


vector<vector<ll>> matrix_power(vector<vector<ll>> a, ll p){
    int n = a.size() - 1;
    if(p == 0){
        for(int i = 1; i <= n; ++i){
            for(int j = 1; j <= n; ++j){
                a[i][j] = (i == j);
            }
        }
        return a;
    }
    if(p == 1)return a;
    if(p % 2 == 0){
        return matrix_power(mul(a, a), p / 2);
    }
    return mul(a, matrix_power(mul(a, a), p / 2));
}


int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);
    cout<<fixed<<setprecision(15);

    int test = 1;
    //cin>>test;
    while(test--){
        int n;ll k;
        cin>>n>>k;
        for(int i = 1; i <= n; ++i){
            cin>>a[i];
        }
        cnt.resize(n + 1);
        for(int i = 1; i <= n; ++i){
            cnt[i].resize(n + 1);
            for(int j = 1; j <= n; ++j){
                cnt[i][j] = (__builtin_popcountll(a[i] ^ a[j]) % 3 == 0);
            }
        }
        cnt = matrix_power(cnt, k - 1);
        ll res = 0;
        for(int i = 1; i <= n; ++i){
            for(int j = 1; j <= n; ++j){
                res += cnt[i][j];
                res %= mod;
            }
        }
        cout<<res<<'\n';
    }

    return 0;
}
