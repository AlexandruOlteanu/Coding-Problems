/*
    Programmer : Alexandru_Olteanu
    Link To Problem : https://codeforces.com/contest/339/problem/D
*/
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
ll const mod=1000000007LL;
ll const md=998244353LL;
ll mypowr(ll a,ll b) {ll res=1;if(b<0)b=0;a%=mod; assert(b>=0);
for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}
ll mypow(ll a,ll b) {ll res=1;if(b<0)b=0;assert(b>=0);
for(;b;b>>=1){if(b&1)res=res*a;a=a*a;}return res;}
ifstream in("input.txt");
ofstream out("output.txt");
#define mp make_pair
#define pb push_back
#define pf push_front
#define fi first
#define se second
#define all(x) x.begin(),x.end()
#define rall(x) x.rbegin(), x.rend()


//#define cin in
//#define cout out

const ll maxn = 4e5 + 5;

int node[maxn];

void update_tree(int n, int turn){
    if(!turn){
        node[n] = node[2 * n + 1] | node[2 * n + 2];
    }
    else{
        node[n] = node[2 * n + 1] ^ node[2 * n + 2];
    }
    if(n){
        update_tree((n - 1) / 2, 1 - turn);
    }
}


int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);
    cout<<fixed<<setprecision(15);


    int test = 1;
    //cin>>test;
    while(test--){
        int n, m;
        cin>>n>>m;
        n = (1<<n);
        for(int i = 1; i <= n; ++i){
            cin>>node[i + 2 * n - 2];
            update_tree((i + 2 * n - 3) / 2, 0);
        }
        while(m--){
            int a, b;
            cin>>a>>b;
            node[a + 2 * n - 2] = b;
            update_tree((a + 2 * n - 3) / 2, 0);
            cout<<node[0]<<'\n';
        }
    }

    return 0;
}
