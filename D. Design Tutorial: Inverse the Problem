/*
    Programmer : Alexandru_Olteanu
    Link To Problem : https://codeforces.com/contest/472/problem/D
*/
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
ll const mod=1000000007LL;
ll const mod2 = 100000000LL;
ll const md=998244353LL;
ll mypowr(ll a,ll b) {ll res=1;if(b<0)b=0;a%=mod; assert(b>=0);
for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}
ll mypow(ll a,ll b) {ll res=1;if(b<0)b=0;assert(b>=0);
for(;b;b>>=1){if(b&1)res=res*a;a=a*a;}return res;}
ifstream in("input.txt");
ofstream out("output.txt");
#define mp make_pair
#define pb push_back
#define pf push_front
#define fi first
#define se second
#define all(x) x.begin(),x.end()
#define rall(x) x.rbegin(), x.rend()


//#define cin in
//#define cout out

const ll infll = 9e18;
const int inf = 2e9;
const ll maxn = 2e3 + 2;

int a[maxn][maxn], dist[maxn][maxn];
int e[maxn];
vector<pair<int, pii>> edges;
vector<pii> v[maxn];
int p[maxn];

void dfs(int x, int y, int parent){
    for(auto u:v[y]){
        if(u.se == parent)continue;
        dist[x][u.se] = dist[x][y] + u.fi;
        dfs(x, u.se, y); 
    }
    return;
}

int find(int x){
    return ((x == p[x]) ? x : find(p[x]));
}
void unite(int x, int y){
    if(e[x] < e[y])p[x] = y, e[y] += e[x];
    else p[y] = x, e[x] += e[y];

}

void build_MST(int n){
    for(int i = 0; i < n; ++i){
        int x = edges[i].se.fi;
        int y = edges[i].se.se;
        int cost = edges[i].fi;
        int fx = find(x), fy = find(y);
        if(fx == fy)continue;
        unite(fx, fy);
        v[x].pb({cost, y});
        v[y].pb({cost, x});
    }
}

void check(int n){
    for(int i = 1; i <= n; ++i){
        dfs(i, i, 0);
    }
    for(int i = 1; i <= n; ++i){
        for(int j = 1; j <= n; ++j){
            if(a[i][j] != dist[i][j]){
                cout<<"NO\n";
                return;
            }
        }
    }
    cout<<"YES\n";
    return;
}


int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);cout.tie(0);
    cout<<fixed<<setprecision(15);
    

    int test = 1;
    //cin>>test;
    while(test--){
        int n;
        cin>>n;
        for(int i = 1; i <= n; ++i){
            p[i] = i;
            e[i] = 1;
            for(int j = 1; j <= n; ++j){
                cin>>a[i][j];
                if(i < j){
                    edges.pb({a[i][j], {i, j}});
                }
            }
        }
        if(edges.empty()){
            if(a[1][1]){
                cout<<"NO\n";
            }
            else{
                cout<<"YES\n";
            }
            return 0;
        }
        sort(all(edges));
        if(edges[0].fi == 0){
            cout<<"NO\n";
            return 0;
        }
        int sz = edges.size();
        build_MST(sz);
        check(n);
    }

    return 0;
}
